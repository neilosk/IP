
DESCRIPTION:

You need to implement a service robot that transfers boxes from an original
position to a specified destination for each box. The boxes have labels and the
priority of transferring a box depends on its label. Implement the Robot and
Box classes as described below. Please note that it is important that the naming
of your project, classes, and signature of methods exactly follow the description.

All fields must be private and all methods must be public.


STEPS:

1. Define two classes Robot and Box.

2. The class Box has three fields: position and destination of type int and
label of type String. The fields destination and label are initialised
in the constructor of the class with values of the two parameters of the
constructor. All boxes have 0 as initial value for their position.

3. In class Box, implement three methods: getPosition, getDestination and
getLabel. They take no parameters and return, respectively, the position,
destination and the label of a box.

4. In class Box, implement a method, setPosition, that receives an int
parameter and sets the position of the box to the value of the parameter.

5. In class Box, implement a method, toString, such that for a box with
position p and label l, the method returns a String with the following
format:    "position: p, label: l"
Note that the method does not have any parameters.

6. The class Robot has one field, transferList, of type List<Box> and
another field, labelPriorities, of type Map<String, Integer>. The
constructor of the class initializes the List as an ArrayList and the
Map as a HashMap.

7. In class Robot, implement a method, addToTransferList, which adds boxes
to the list to transfer. This method receives an object of type Box as its
only parameter and adds it to transferList. The method returns nothing.

8. In the class Robot, implement a method, printTransferList, that prints
the information about boxes in the transferList per line. For example,
for a transferList that contains two boxes, b1 with position p1 and label
l1, and box b2 with position p2 and label l2, the following will be printed
after running the method:
"position: p1, label: l1"
"position: p2, label: l2"
This method does not have any parameters and does not return anything.
(Hint: use the toString method in class Box as a helper method)

9. In class Robot, implement a method, moveForward, which has two parameters
called box and steps of types Box and int. The robot moves the box forward
and steps represents how much the position of the box increases. However, a
box may not be moved further than its destination and will remain in place
once it reaches it. (Hint: this method uses method setPosition from the Box
class as a helper method)

10. In class Robot, implement a method, setLabelPriority, which receives
a parameter called box of type Box and another parameter called
priority of type int. The method should fetch the label of the box passed
as a parameter. If the label is not null, then the method maps the key
label to priority in labelPriorities.

11. In class Robot, implement a method, getBoxPriority, that returns the
priority of a box (an int) based on the label of the box. If the label of
the box is not a key in labelPriorities, the method returns -1.